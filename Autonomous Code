#pragma config(Sensor, in1,    leftPotentiometer, sensorPotentiometer)
#pragma config(Sensor, in2,    rightPotentiometer, sensorPotentiometer)
#pragma config(Sensor, in3,    rightLineFollower, sensorLineFollower)
#pragma config(Sensor, in4,    centerLineFollower, sensorLineFollower)
#pragma config(Sensor, in5,    leftLineFollower, sensorLineFollower)
#pragma config(Sensor, dgtl1,  frontRightEncoder, sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  frontLeftEncoder, sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  rearRightEncoder, sensorQuadEncoder)
#pragma config(Sensor, dgtl7,  rearLeftEncoder, sensorQuadEncoder)
#pragma config(Sensor, dgtl9,  clawSensor,     sensorTouch)
#pragma config(Motor,  port1,           frontRightMotor, tmotorVex393_HBridge, openLoop, driveRight, encoderPort, dgtl1)
#pragma config(Motor,  port2,           frontLeftMotor, tmotorVex393_MC29, openLoop, driveLeft, encoderPort, dgtl3)
#pragma config(Motor,  port3,           rearRightMotor, tmotorVex393_MC29, openLoop, driveRight, encoderPort, dgtl5)
#pragma config(Motor,  port4,           rearLeftMotor, tmotorVex393_MC29, openLoop, driveLeft, encoderPort, dgtl7)
//*!!Code automatically generated by 'ROBOTC' configuration wizard    

void pointTurnRight(float degrees)
{
  While((SensorValue[frontRightEncoder] + SensorValue[rearLefttEncoder]) / 2 <= degrees*2)
  {
  
   motor[frontRightMotor , rearLeftMotor] = 126;
   motor[frontLeftMotor ,  rearRightMotor]= -126;
   
  }

}

void pointTurnLeft(float degrees)
{
  While((SensorValue[frontRightEncoder] + SensorValue[rearLefttEncoder]) / 2 >= degrees*2)
  {
  
   motor[frontRightMotor , rearLeftMotor] = -126;
   motor[frontLeftMotor ,  rearRightMotor]= 126;
   
  }

}

Void forward(float distance)
{
  while((SensorValue[frontRightEncoder] + SensorValue[rearLefttEncoder]) / 2 <= distance)
  {
  
    motor[frontRightMotor , frontLeftMotor  ,rearRightMotor ,  rearLeftMotor] = 126;
    
  }
  
}

Void reverse(float distance)
{
  while((SensorValue[frontRightEncoder] + SensorValue[rearLefttEncoder]) / 2 <= distance)
  {
  
    motor[frontRightMotor , frontLeftMotor  ,rearRightMotor ,  rearLeftMotor] = -126;
    
  }
  
}

task Main()
{

  

}
